{
  "/community": {
    "title": "Community",
    "view": "community",
    "text": "Coming soon",
    "name": "community",
    "path": "/content/community",
    "url": "/community",
    "files": {},
    "pages": {}
  },
  "/docs": {
    "title": "Docs",
    "view": "docs",
    "text": "## Alpha Release\n\nYou’re here early—everything is extremely unstable. Consider this a modestly functional sketch. A starting point with clear limitations, leaning on existing and familiar convention to form a foundation for spanning the gap between here and there.\n\nHow do we save the future? With another CMS, of course.\n\nHoping you find this immediately useful as a basic tool for creating experimental personal sites in the short term.\n\nIf you have any questions please [see the FAQ](/#hub/faq), or feel free to send an email.\n\n## Features\n\n- **No database**: there is only a filesystem\n- **Data ownership**: your data remains with you\n- **Offline accessible**: manage your site without a connection\n- **Hackable**: fork the panel and sites to customize as you see fit\n- **Extendable**: easily define custom fieldsets with blueprints\n- **Free**: publish to the web for free without any intermediaries\n- **Fun**: uses [Choo](https://choo.io) as a front-end framework\n\n## Philosophy\n\nYou are your data, your data is you. You should own your tools, your tools should not own you. Culture wants to be free. Platforms are dead. Universal knowledge for everyone.\n\n## Getting Started\n\nEnoki is an ultralight set of tools for publishing on the decentralized web. Simply open [Beaker Browser](https://beakerbrowser.com) and navigate to [https://panel.enoki.site](https://panel.enoki.site).\n\n## Sites\n\nCreating a site is as simple as navigating to **Sites** → **Create a New Site**. Choose a design, enter some basic information, and authorize Beaker to fork the design. Your site is now loaded into Enoki and will remain accessible in the **Sites** area.\n\nSay you manually created an Archive with Beaker, or forked a site some other way. Simply click **Load an Existing Site** and select your Archive. Note that you must be the owner of the Archive, and it must contain a `/content` directory.\n\n## Editor\n\nThe **Editor** is where you make edits to your Site’s content.\n\n### Pages\n\nTo create a new page navigate to **Editor** → **Pages** → **Create**. When creating a page you’ll see a few options.\n\n- **Title** is self explanatory.\n- **Pathname** is the `/what-you-see-in-the-url`.\n- **View** defines how the content is displayed on your Site, and what fields you see in the Panel.\n\n### Coming soon\n\n- Change page location after creation\n- Adjust view after creation\n\n## Files\n\nFiles are pretty dumb at the moment.\n\n## Blueprints\n\nWhen viewing Pages and Files in the Panel you’re presented with a set of fields representing the content. What fields should appear are defined by creating **Blueprints**. \n\nFor now, take a look at a blueprint associated with one of the Designs. It’s pretty self-explanatory.\n\n## Customization and Development\n\nThis version of Enoki is highly experimental! Certain things are going to change quite quickly, so please tread lightly.\n\n### Front-end\n\nEnoki uses [Choo](https://choo.io) as a front-end framework. It’s like React, but fun. Fork the Panel or any Design, then navigate to `/source` and run `npm install` and `npm start`. Working to document this better, but should give you a starting point.\n\n### Fields\n\nFields are constructed using [`nanocomponent`](https://github.com/choojs/nanocomponent). For now, take a look at a simple field such as `text`. For a more advanced example which depends on a 3rd party library, look at `textarea`.\n\n### Idiosyncrasies\n\n- Shit is messy right now, please watch your step.\n- When creating a View, be sure to add it to `/views/index.js`.\n- Also be sure to create a Blueprint so the correct fields appear in the Panel.",
    "name": "docs",
    "path": "/content/docs",
    "url": "/docs",
    "files": {},
    "pages": {
      "fields": {
        "name": "fields",
        "path": "/content/docs/fields",
        "url": "/docs/fields",
        "source": "/content/docs/fields"
      }
    }
  },
  "/faq": {
    "title": "FAQ",
    "view": "faq",
    "text": "## Who is this for?\n\nCurrently, for people who probably spend most of their time making websites to learn more about the peer-to-peer web. In the future? Hmm…\n\n## What about access over HTTP?\n\nYeah, this is important. For now, Enoki uses Beaker’s web API to read your site’s Dat archive into one big javascript object. This object loaded into Choo’s state.\n\nOne way to do this is to write `state.content` to a JSON file saving from the Panel. Then, depending upon dat/http use the web API or request the JSON file. Actually, this happens now, it’s just not documented as there are interesting things which could be done by reading multiple archives into a site, and writing to static JSON prevents that from happening.\n\nAnyway, with that static JSON in place you can use a service like [Hashbase](https://hashbase.io) to persistently sync your app. Just copy the `dat://` url of your site to Hashbase. Alternatively, install [`dathttpd`](https://github.com/beakerbrowser/dathttpd) on your own server.\n\n## What inspired this\n\n- Kirby\n- Teenage Engineering\n- etc\n\n## This looks like a wireframe\n\nYeah, it sort of is a functional wireframe—a representation of the expected basics for a CMS today. Consider it a starting point meant to progressively evolve into an interface for peer-to-peer publishing as we collectively develop the language.\n\n## My Sites sometime dissapear\n\nThis is because sites are currently using localstorage, which associates data with domain. If you load a site at `https://panel.enoki.site`, it will not appear in the Sites section when at `dat://panel.enoki.site`. This will be resolved in the future.\n\n## Shouldn’t this output static HTML for pre-rendered routes?\n\nYeah, this would be great. Found a few difficult questions about how to do this without cluttering up the content directory with a bunch of `index.html` files.\n\n## How does pagination work?\n\nEnoki currently reads your entire `/content` directory into one big object. For smaller sites, this is fine. For larger sites, that can become an issue. For now, just manually fake paginate by converting an object of content into an array, then using array methods.\n\n## What about image resizing?\n\nThis will probably be handled with Canvas in the future. Nothing yet.\n\n## I want _______________\n\nYeah, chances are this has been thought about. Honestly, there are so many solid and mature CMS solutions that can output static sites. Just use one of those and publish the contents inside a Dat Archive if your’re looking for all the classic stuff. This project is looking to expand upon much more than just making sites.",
    "name": "faq",
    "path": "/content/faq",
    "url": "/faq",
    "files": {},
    "pages": {}
  },
  "/log": {
    "title": "Log",
    "view": "log",
    "text": "## 0.1.0\n\nThis is the first release of Enoki to run in Beaker following the Alpha period. Too many changes to list, but a quick summarization follows.\n\n### Fields\n\n- Added display fields (pages/files)\n- New checkbox field\n- New color field\n- New range field\n- Simplified how data is passed to fields from fieldsets\n\n### Interface\n\n- Added `layouts` to blueprints, enabling positioning of fields\n- Added support for selecting a design when creating a site\n- Created the **Guides** section in Hub\n- Modularized navigational elements into composable wrappers\n\n### Designs\n\n- Cleaned up the existing Enoki Starterkit design\n- Created the new **System** design, the most basic functional design\n\n### Functionality\n\n- Created the `smarkt` module for reading files\n- Created the `hypha` modules for reading folders\n- Updated the `enoki` module with these new dependencies\n- Added async/promises to the API for easy use with Beaker’s Web Api\n- Implimented early HTTP support with `content.json` fallback",
    "name": "log",
    "path": "/content/log",
    "url": "/log",
    "files": {},
    "pages": {}
  },
  "/issues": {
    "title": "Issues",
    "view": "issues",
    "text": "## Contributing\n\nFeel free to fork the panel repository, create whatever changes you’d like by following the pattern here (or using the panel itself to manage issues), then creating a pull request. Wanting to consolidate things outside of Github Issues to make things offline accessibile.",
    "name": "issues",
    "path": "/content/issues",
    "url": "/issues",
    "files": {},
    "pages": {
      "cleanup-codebase": {
        "name": "cleanup-codebase",
        "path": "/content/issues/cleanup-codebase",
        "url": "/issues/cleanup-codebase",
        "source": "/content/issues/cleanup-codebase"
      },
      "designs": {
        "name": "designs",
        "path": "/content/issues/designs",
        "url": "/issues/designs",
        "source": "/content/issues/designs"
      },
      "fields": {
        "name": "fields",
        "path": "/content/issues/fields",
        "url": "/issues/fields",
        "source": "/content/issues/fields"
      },
      "files": {
        "name": "files",
        "path": "/content/issues/files",
        "url": "/issues/files",
        "source": "/content/issues/files"
      },
      "inline-editing": {
        "name": "inline-editing",
        "path": "/content/issues/inline-editing",
        "url": "/issues/inline-editing",
        "source": "/content/issues/inline-editing"
      },
      "library": {
        "name": "library",
        "path": "/content/issues/library",
        "url": "/issues/library",
        "source": "/content/issues/library"
      },
      "page-functionality": {
        "name": "page-functionality",
        "path": "/content/issues/page-functionality",
        "url": "/issues/page-functionality",
        "source": "/content/issues/page-functionality"
      },
      "saving": {
        "name": "saving",
        "path": "/content/issues/saving",
        "url": "/issues/saving",
        "source": "/content/issues/saving"
      },
      "sites": {
        "name": "sites",
        "path": "/content/issues/sites",
        "url": "/issues/sites",
        "source": "/content/issues/sites"
      }
    }
  },
  "/docs/fields": {
    "title": "Fields",
    "view": "fields",
    "text": "An overview of the available fields.",
    "tags": [
      "technopastoral",
      "extra-statecraft"
    ],
    "checkbox": true,
    "color": "#fffb00",
    "range": "70",
    "name": "fields",
    "path": "/content/docs/fields",
    "url": "/docs/fields",
    "files": {},
    "pages": {}
  },
  "/guides/05-starting-from-scratch": {
    "title": "Starting From Scratch",
    "view": "guide",
    "background": "#5a2da8",
    "color": true,
    "excerpt": "Purely random networks do not obey power laws, so when the early proponents of the scale-free paradigm started seeing power laws in real-world networks in the late 1990s, they viewed them as evidence of a universal organizing principle underlying the formation of these diverse networks. The architecture of scale-freeness, researchers argued, could provide insight into fundamental questions such as how likely a virus is to cause an epidemic, or how easily hackers can disable a network.",
    "text": "Purely random networks do not obey power laws, so when the early proponents of the scale-free paradigm started seeing power laws in real-world networks in the late 1990s, they viewed them as evidence of a universal organizing principle underlying the formation of these diverse networks. The architecture of scale-freeness, researchers argued, could provide insight into fundamental questions such as how likely a virus is to cause an epidemic, or how easily hackers can disable a network.",
    "name": "05-starting-from-scratch",
    "path": "/content/guides/05-starting-from-scratch",
    "url": "/guides/05-starting-from-scratch",
    "files": {},
    "pages": {}
  },
  "/issues/cleanup-codebase": {
    "title": "Cleanup codebase",
    "view": "issue",
    "text": "Gotta refactor a little bit, it’s getting messy in here.\n\n## Structure\n\n- [ ] Try to make the DOM as representational as possible.\n- [ ] Support imports/require/window\n- [ ] Create a bundle.js which exposes over window\n- [ ] Create a super simple demo using no build system\n\n## Styles\n\n- [ ] Switch from gr8 for layout to CSS grid/variables.\n- [ ] Create `.copy` styles for dark/light\n- [ ] Simple `sheetify` css-in-js for most things.",
    "tags": [
      "todo"
    ],
    "name": "cleanup-codebase",
    "path": "/content/issues/cleanup-codebase",
    "url": "/issues/cleanup-codebase",
    "files": {},
    "pages": {}
  },
  "/issues/designs": {
    "title": "Designs",
    "view": "issue",
    "tags": [
      "1.0.0",
      "todo"
    ],
    "text": "Create some fresh designs.\n\n## Todo\n\n- [ ] Update dependencies before release\n\n## Things to keep in mind\n\n- Super simple document / plain CSS\n\n## Streamer\n\n- [ ] A design for streams (vvatch style)\n- [ ] Vlog style?\n\n## Ripple\n\n- SVG warping sort of thing, text input to outlined shapes",
    "name": "designs",
    "path": "/content/issues/designs",
    "url": "/issues/designs",
    "files": {},
    "pages": {}
  },
  "/issues/fields": {
    "title": "Fields",
    "view": "issue",
    "text": "## Cleanup\n\nCurrently, fields are a bit sloppy. Some immediate improvements.\n\n- [x] Store everything within an internal `state` object\n- [X] Output a single object to `emit` containing `.value`\n- [ ] Autoscroll textarea when at bottom\n- [ ] Wrap fieldset in `<form>`\n- [ ] Convert change to `button[type=\"submit\"]`\n- [ ] Add html5 validation\n\n## New fields\n\n- [X] Checkbox\n- [X] Range\n- [ ] Radio selector\n- [ ] Structured data\n- [ ] Font (copy font files to site?)\n- [x] Color\n- [ ] Help (description sort of thing)",
    "tags": [
      "1.0.0",
      "todo"
    ],
    "name": "fields",
    "path": "/content/issues/fields",
    "url": "/issues/fields",
    "files": {},
    "pages": {}
  },
  "/issues/files": {
    "title": "Files",
    "view": "issue",
    "tags": [
      "todo",
      "1.0.1"
    ],
    "text": "## Todo\n\n- [ ] Meta data support (api/panel)\n- [ ] Video preview\n- [ ] Audio preview\n- [ ] Image zooming",
    "name": "files",
    "path": "/content/issues/files",
    "url": "/issues/files",
    "files": {},
    "pages": {}
  },
  "/issues/inline-editing": {
    "title": "Inline editing",
    "view": "issue",
    "tags": [
      "idea"
    ],
    "text": "Explore implimentation of inline-editing in a design.\n\n- Web API `isOwner` to enable `contenteditable`",
    "name": "inline-editing",
    "path": "/content/issues/inline-editing",
    "url": "/issues/inline-editing",
    "files": {},
    "pages": {}
  },
  "/issues/library": {
    "title": "Library",
    "view": "issue",
    "text": "Need to clean up some of the boundaries between things.\n\n- [ ] Localization support\n- [ ] `require('enoki/tools')` for handy methods",
    "tags": [
      "todo"
    ],
    "name": "library",
    "path": "/content/issues/library",
    "url": "/issues/library",
    "files": {},
    "pages": {}
  },
  "/issues/page-functionality": {
    "title": "Page functionality",
    "view": "issue",
    "text": "Need to improve some management issues with Pages.\n\n- [ ] Field for `hidden` toggle\n- [ ] Field for adjusting `view` in Settings.\n- [ ] Field for adjusting `pathname` in Settings.",
    "tags": [
      "todo"
    ],
    "name": "page-functionality",
    "path": "/content/issues/page-functionality",
    "url": "/issues/page-functionality",
    "files": {},
    "pages": {}
  },
  "/issues/saving": {
    "title": "Saving",
    "view": "issue",
    "tags": [
      "0.1.1",
      "todo"
    ],
    "text": "How to handle static output?\n\n- [ ] Local storage for changes?\n- [ ] Saving title change saves to index.html, too\n- [ ] Meta tags in index.html\n- [ ] How to speed things up (static output / reload all state)",
    "name": "saving",
    "path": "/content/issues/saving",
    "url": "/issues/saving",
    "files": {},
    "pages": {}
  },
  "/issues/sites": {
    "title": "Sites",
    "view": "issue",
    "tags": [
      "todo",
      "1.0.1"
    ],
    "text": "## Todo\n\n- [x] Settings → Remove\n- [ ] Settings → HTTP fallback\n- [ ] Reordering\n- [ ] Persist across domains (ditch localstorage?)\n\n## Ideas\n\n- Some sort of p2p stats, such as how many peers, etc…\n- A simple way of deploying to a service like Hashbase",
    "name": "sites",
    "path": "/content/issues/sites",
    "url": "/issues/sites",
    "files": {},
    "pages": {}
  },
  "/": {
    "title": "Hub",
    "view": "home",
    "text": "",
    "name": "content",
    "path": "/content",
    "url": "/",
    "files": {},
    "pages": {
      "community": {
        "name": "community",
        "path": "/content/community",
        "url": "/community",
        "source": "/content/community"
      },
      "docs": {
        "name": "docs",
        "path": "/content/docs",
        "url": "/docs",
        "source": "/content/docs"
      },
      "faq": {
        "name": "faq",
        "path": "/content/faq",
        "url": "/faq",
        "source": "/content/faq"
      },
      "guides": {
        "name": "guides",
        "path": "/content/guides",
        "url": "/guides",
        "source": "/content/guides"
      },
      "issues": {
        "name": "issues",
        "path": "/content/issues",
        "url": "/issues",
        "source": "/content/issues"
      },
      "log": {
        "name": "log",
        "path": "/content/log",
        "url": "/log",
        "source": "/content/log"
      }
    }
  },
  "/guides": {
    "title": "Guides",
    "view": "guides",
    "text": "Working on this :)",
    "name": "guides",
    "path": "/content/guides",
    "url": "/guides",
    "files": {
      "drafts.txt": {
        "name": "drafts",
        "path": "/content/guides/drafts.txt",
        "url": "/guides/drafts.txt",
        "source": "dat://e87b59368258cbc0941d85909dd421bcefe1b79b82f8cdffbf6cb187d260ba01/content/guides/drafts.txt",
        "extension": ".txt",
        "filename": "drafts.txt"
      }
    },
    "pages": {
      "01-creating-your-first-site": {
        "name": "01-creating-your-first-site",
        "path": "/content/guides/01-creating-your-first-site",
        "url": "/guides/01-creating-your-first-site",
        "source": "/content/guides/01-creating-your-first-site"
      },
      "02-customizing-your-site": {
        "name": "02-customizing-your-site",
        "path": "/content/guides/02-customizing-your-site",
        "url": "/guides/02-customizing-your-site",
        "source": "/content/guides/02-customizing-your-site"
      },
      "03-creating-pages": {
        "name": "03-creating-pages",
        "path": "/content/guides/03-creating-pages",
        "url": "/guides/03-creating-pages",
        "source": "/content/guides/03-creating-pages"
      },
      "04-how-to-leave-enoki": {
        "name": "04-how-to-leave-enoki",
        "path": "/content/guides/04-how-to-leave-enoki",
        "url": "/guides/04-how-to-leave-enoki",
        "source": "/content/guides/04-how-to-leave-enoki"
      },
      "05-starting-from-scratch": {
        "name": "05-starting-from-scratch",
        "path": "/content/guides/05-starting-from-scratch",
        "url": "/guides/05-starting-from-scratch",
        "source": "/content/guides/05-starting-from-scratch"
      }
    }
  },
  "/guides/02-customizing-your-site": {
    "title": "Customizing Your Sites",
    "view": "guide",
    "excerpt": "Unlike other platforms, which provide interfaces to enter data into centralized databases and render that data with proprietary source, Enoki generates actual websites! When creating a site, you are given the actual source code for the site, providing infinite customization possibility.",
    "text": "Unlike other platforms, which provide interfaces to enter data into centralized databases and render that data with proprietary source, Enoki generates actual websites! When creating a site, you are given the actual source code for the site, providing infinite customization possibility.\n\nNot a developer? Don’t worry, creating lessons and guides on how to start learning is one of the top priorities. In the meantime please feel free to poke around!\n\n## Installation\n\n1. Open the `source` directory of your site in terminal\n2. Run `npm install`\n3. Run `npm start` to watch files during development\n4. Run `npm build` to bundle for production\n\n## Development and Dependencies\n\nBecause there is no difference between server and client on the peer-to-peer web, everything is client-side. In practice, this feels like the conveniences of an API like Firebase’s, but native to the browser and data is saved locally to static files.\n\nEnoki has some preferences in default tooling, but everything is swappable. The most notable is [Choo](https://choo.io), a little front-end framework. Think of it as React or Vue, but without the fluff.",
    "color": true,
    "featured": "",
    "tags": [
      "beginner"
    ],
    "background": "#00917b",
    "name": "02-customizing-your-site",
    "path": "/content/guides/02-customizing-your-site",
    "url": "/guides/02-customizing-your-site",
    "files": {
      "image.svg": {
        "name": "image",
        "path": "/content/guides/02-customizing-your-site/image.svg",
        "url": "/guides/02-customizing-your-site/image.svg",
        "source": "dat://e87b59368258cbc0941d85909dd421bcefe1b79b82f8cdffbf6cb187d260ba01/content/guides/02-customizing-your-site/image.svg",
        "extension": ".svg",
        "filename": "image.svg",
        "type": "image"
      }
    },
    "pages": {}
  },
  "/guides/01-creating-your-first-site": {
    "title": "Creating Your First Site (or not!)",
    "view": "guide",
    "text": "Enoki is currently an *experimental* CMS (content management system) for the peer-to-peer web. It’s intended for those familiar with making websites to gain exposure to the unique affordances of the peer-to-peer web.\n\n1. Platforms should be free, and not treat attention as a resource to be extracted from users and sold to advertisers.\n2. Users should own their data, and grant permission to platforms to read and write locally *by default*. Interfaces are simply *views* for data which exist with the user.\n3. Data should be shared openly; the tools should be fungible. Anyone can create applications with instant access to all public data, avoiding limitations implimented by proprietary APIs.\n4. Our tools should be ultralight and understandable, not heavy and complex!\n\n## Creating a Site\n\n1. Navigate to **Sites** and click *Create a New Site*\n2. Enter your site’s Title, and a quick Description\n3. Browse the design, and select one which looks right for you\n4. Authorize Beaker to **fork** the design\n5. Begin editing your content!\n\nYou might be asking, what is **forking**? Simply put, it’s creating your own unique copy of the site. Unlike other platforms, your site’s files exist on your computer! This means *you* own and control your site. There is no risk of your site dissapearing if Enoki ceases to exist.\n\nThis is a *super critical thing*. Platforms today are designed to make you dependant upon them as a way to sell advertising. By giving you control over your own content and data, you are not bound to Enoki!\n\n## Managing your Content\n\nYou can manage your content in a few different ways.\n\n1. With the Enoki Panel\n2. By editing the files directly using whatever tool you’d like\n3. Using any application which can read your content\n\nUnlike platforms, your data is human readable. Enoki just creates folders and text files! You can edit your site with any application which can edit text files. Not only that, you can easily use other applications (or create your own) to manage your site.\n\nThis is possible because you own your content and data!\n\n## Accessing Your Site\n\nYou’ll notice that URLs look funny in Beaker. Remember torrents? You’ve probably downloaded music or movies this way. Beaker Browser is an experiment built on the entire internet working like that. You don’t have to pay any one for your site to appear online! This is *truely free*, and not dependant upon advertising.\n\nThis is called peer-to-peer networking. When using a tool like SquareSpace, your site exists on a server they own. Anyone visiting your site must connect through SquareSpace. Now, imagine them instead connected directly to you, and not only that, but any one else who happens to be visiting your site. Crazy, right?!\n\nBecause there is no central provider, like SquareSpace, someone (either you or someone else) must be providing your site for others to access it. Fortunately, you can simply enter your site’s `dat` URL somewhere like [Hashbase](https://hashbase.com) which ensure your site will always be accessible! Not only that, you can also access your site over `http` in a normal browser like Chrome or Firefox!\n\nYou might be thinking, *Shit! This makes a lot of sense!* Yeah, it does! If not, don’t worry—it’s still early and the tools will get there.\n\n## Cutomizing Your Site\n\nEnoki builds *real websites*. Not only do you get all the files for the site, you also get the entire source. You can take this source and choose to never use Enoki again, if you’d like. Remember; you are learning how to *actually program*, and not just use proprietary tools.",
    "excerpt": "Ok, you’ve stumbled across Enoki. What are you getting yourself into? Let’s look at how is this different from existing platforms, and expand upon both the pros and cons. Is Enoki right for you? Maybe, but hopefully you can take the knowledge with you regardless of it’s a match.",
    "color": true,
    "featured": true,
    "tags": [
      "beginner"
    ],
    "background": "#045bc1",
    "name": "01-creating-your-first-site",
    "path": "/content/guides/01-creating-your-first-site",
    "url": "/guides/01-creating-your-first-site",
    "files": {
      "image.svg": {
        "name": "image",
        "path": "/content/guides/01-creating-your-first-site/image.svg",
        "url": "/guides/01-creating-your-first-site/image.svg",
        "source": "dat://e87b59368258cbc0941d85909dd421bcefe1b79b82f8cdffbf6cb187d260ba01/content/guides/01-creating-your-first-site/image.svg",
        "extension": ".svg",
        "filename": "image.svg",
        "type": "image"
      }
    },
    "pages": {}
  },
  "/guides/03-creating-pages": {
    "title": "Creating Custom Pages",
    "view": "guide",
    "tags": [
      "beginner"
    ],
    "color": true,
    "featured": false,
    "excerpt": "Most importantly, reading a book is active, unlike most of the passive consumption we do in front of screens. I think a lot of the anxiety we can feel from technology comes from that passive relationship alongside its speed. Look at cable news or your social media feeds. All day long, we’re having absurd novelty, enviable affluence, and sincere tragedy and distress sandwiched together and railgunned into our face. A book offers some necessary composure and consistency to help find our bearings in a world oriented toward violent delivery.",
    "text": "## Notes\n\n- Overview of fields\n- Overview of blueprints",
    "background": "#f21006",
    "name": "03-creating-pages",
    "path": "/content/guides/03-creating-pages",
    "url": "/guides/03-creating-pages",
    "files": {
      "image.svg": {
        "name": "image",
        "path": "/content/guides/03-creating-pages/image.svg",
        "url": "/guides/03-creating-pages/image.svg",
        "source": "dat://e87b59368258cbc0941d85909dd421bcefe1b79b82f8cdffbf6cb187d260ba01/content/guides/03-creating-pages/image.svg",
        "extension": ".svg",
        "filename": "image.svg",
        "type": "image"
      }
    },
    "pages": {}
  },
  "/guides/04-how-to-leave-enoki": {
    "title": "How to Leave Enoki",
    "view": "guide",
    "tags": [
      "beginner"
    ],
    "color": false,
    "featured": false,
    "excerpt": "Technology moves fast. Enoki knows it won’t always be the best tool for you. Rest easy knowing that you own your data and content. It exists on your computer, and not only on a server owned by a platform.",
    "text": "## Ideas\n\n- One\n- Two\n- Three\n\n## Draft\n\nTechnology moves fast. Enoki won’t always be the best tool for you. Rest easy knowing that you own your data and content. It exists on your computer, and not only on a server owned by a platform.",
    "background": "#fbc200",
    "name": "04-how-to-leave-enoki",
    "path": "/content/guides/04-how-to-leave-enoki",
    "url": "/guides/04-how-to-leave-enoki",
    "files": {
      "image.svg": {
        "name": "image",
        "path": "/content/guides/04-how-to-leave-enoki/image.svg",
        "url": "/guides/04-how-to-leave-enoki/image.svg",
        "source": "dat://e87b59368258cbc0941d85909dd421bcefe1b79b82f8cdffbf6cb187d260ba01/content/guides/04-how-to-leave-enoki/image.svg",
        "extension": ".svg",
        "filename": "image.svg",
        "type": "image"
      }
    },
    "pages": {}
  }
}